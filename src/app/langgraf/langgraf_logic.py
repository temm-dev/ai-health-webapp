import asyncio
import json
import uuid
from datetime import datetime
from typing import List, TypedDict

from langgraph.graph import END, StateGraph

import logging

from langchain_google_genai import ChatGoogleGenerativeAI

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

llm = ChatGoogleGenerativeAI(
    model="gemini-2.5-flash",
    google_api_key="AIzaSyDRujHWa_BOpcKmDUZDRnHoVhZX9TftWAM",
    temperature=0.4,
)



# TypedDict –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å LangGraph
class State(TypedDict):
    age: int
    region: dict
    face_confidence: float
    gender: str
    dominant_gender: str
    race: str
    dominant_race: str
    emotion: str
    dominant_emotion: str
    time: float
    antispoof_score: float
    is_real: bool
    acne: float
    redness: float
    eye_bags: float
    red_flags: List[str]
    recommendations: str
    risk_level: str
    analysis_id: str
    timestamp: str
    stress_level: float
    sleep_quality: float
    skin_health_index: float
    vitality_score: float


def transform_json_to_state(json_data: dict) -> State:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç State"""
    # analyze_data = json_data.get("analyze", {})

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –ø–æ–ª –∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    gender_data = json_data.get("gender", {})
    dominant_gender = json_data.get("dominant_gender", "unknown")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Ä–∞—Å—É –∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    race_data = json_data.get("race", {})
    dominant_race = json_data.get("dominant_race", "unknown")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é –∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    emotion_data = json_data.get("emotion", {})
    dominant_emotion = json_data.get("dominant_emotion", "neutral")

    stress_level = json_data.get("stress_level", 0.0)
    sleep_quality = json_data.get("sleep_quality", 0.0)
    skin_health_index = json_data.get("skin_health_index", 0.0)
    vitality_score = json_data.get("vitality_score", 0.0)

    return {
        "age": json_data.get("age", 0),
        "region": json_data.get("region", {}),
        "face_confidence": json_data.get("face_confidence", 0.0),
        "gender": dominant_gender,
        "dominant_gender": dominant_gender,
        "race": dominant_race,
        "dominant_race": dominant_race,
        "emotion": dominant_emotion,
        "dominant_emotion": dominant_emotion,
        "time": json_data.get("time", 0.0),
        "antispoof_score": 0.9,  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –≤ JSON –Ω–µ—Ç –∞–Ω—Ç–∏—Å–ø—É—Ñ–∏–Ω–≥–∞
        "is_real": True,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ª–∏—Ü–æ —Ä–µ–∞–ª—å–Ω–æ–µ
        "acne": json_data.get("acne", 0.0),
        "redness": json_data.get("redness", 0.0),
        "eye_bags": json_data.get("eyebags", 0.0),  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        "red_flags": [],
        "recommendations": "",
        "risk_level": "low",
        "analysis_id": str(uuid.uuid4()),
        "timestamp": datetime.now().isoformat(),
        "stress_level": stress_level,
        "sleep_quality": sleep_quality,
        "skin_health_index": skin_health_index,
        "vitality_score": vitality_score,
    }


async def analyze_parameters(state: State):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –∞ –Ω–µ –¥–∏–∞–≥–Ω–æ–∑—ã"""
    try:
        logger.info(f"üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {state.get('analysis_id', 'unknown')}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º confidence –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        confidence_percent = int(state["face_confidence"] * 100)

        analysis_prompt = f"""
        –¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞. 
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑—ã.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
        - –í–æ–∑—Ä–∞—Å—Ç: {state['age']}
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {confidence_percent}%
        - –ü–æ–ª: {state['gender']}
        - –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {state['dominant_emotion']}
        - –£—Ä–æ–≤–µ–Ω—å –∞–∫–Ω–µ: {state['acne']}/1
        - –ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ –∫–æ–∂–∏: {state['redness']}/1  --- IGNORE ---
        - –ú–µ—à–∫–∏ –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏: {state['eye_bags']}/1
        - –°–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞: {state.get('facial_symmetry', 'N/A')}/1
        - –°—Ä–µ–¥–Ω—è—è –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –≥–ª–∞–∑: {state.get('average_eye_openness', 'N/A')}/1
        - –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º—ã—à—Ü –ª–∏—Ü–∞: {state.get('muscle_tension', 'N/A')}/1
        - –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {state['stress_level']}/1
        - –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: {state['sleep_quality']}/1
        - –ò–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–∂–∏: {state['skin_health_index']}/1
        - –ò–Ω–¥–µ–∫—Å –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {state['vitality_score']}/1

        –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø (–Ω–µ –¥–∏–∞–≥–Ω–æ–∑—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        - [–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è]

        –ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫:
        ‚úÖ "–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è –≥—Ä—É—Å—Ç–∏"
        ‚úÖ "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–º–µ—Ç–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –∞–∫–Ω–µ"
        ‚úÖ "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–µ—à–∫–∏ –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏ —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç–∏"
        
        ‚ùå –ù–ï–î–û–ü–£–°–¢–ò–ú–û: 
        ‚ùå "–ú–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é" 
        ‚ùå "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö"
        ‚ùå "–ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –ø–æ—á–µ–∫"

        –ï—Å–ª–∏ –∑–Ω–∞—á–∏–º—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ "–ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π".
        –í–∞–∂–Ω–æ: –Ω–µ –ø—Ä–µ—É–≤–µ–ª–∏—á–∏–≤–∞–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Ä–æ–π –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω—ã.
        """

        analysis_result = await llm.ainvoke(analysis_prompt)

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        observations = []
        if "–ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π" not in analysis_result.content:
            lines = analysis_result.content.strip().split("\n") # type: ignore
            for line in lines:
                line = line.strip()
                if line.startswith("-"):
                    observation = line[1:].strip()
                    if observation and observation != "–ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π":
                        observations.append(observation)

        # –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        risk_factors = 0
        if state["dominant_emotion"] in ["sad", "angry"]:
            risk_factors += 1
        if state["acne"] > 0.5:
            risk_factors += 1
        if state["eye_bags"] > 0.53:
            risk_factors += 1
        if state["redness"] > 0.8:
            risk_factors += 1

        risk_level = (
            "high" if risk_factors >= 2 else "medium" if risk_factors == 1 else "low"
        )

        print("=" * 60)
        print("–ê–ù–ê–õ–ò–ó –ü–ê–†–ê–ú–ï–¢–†–û–í:")
        print("=" * 60)
        if observations:
            for i, obs in enumerate(observations, 1):
                print(f"üìù {i}. {obs}")
        else:
            print("‚úÖ –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        print(f"üìä –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level.upper()}")
        print("=" * 60)

        state["red_flags"] = observations
        state["risk_level"] = risk_level

        logger.info(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(observations)}, —Ä–∏—Å–∫: {risk_level}"
        )
        return state

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_parameters: {e}")
        state["red_flags"] = ["–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ"]
        state["recommendations"] = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        state["risk_level"] = "error"
        return state


async def generate_recommendations(state: State):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    try:
        if not state["red_flags"]:
            state["recommendations"] = (
                "‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏."
            )
            print("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ")
            return state

        recommendations_prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

        –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø:
        {chr(10).join(f'- {obs}' for obs in state['red_flags'])}

        –ö–û–ù–¢–ï–ö–°–¢:
        - –í–æ–∑—Ä–∞—Å—Ç: {state['age']}
        - –ü–æ–ª: {state['gender']}
        - –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {state['risk_level']}

        ‚ö†Ô∏è –í–ê–ñ–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
        - –ù–ï –Ω–∞–∑–Ω–∞—á–∞–π –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        - –ù–ï —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑—ã  
        - –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤—Ä–∞—á–µ–π
        - –î–∞–π –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 300 —Å–ª–æ–≤
        - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫

        üìã –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
        ## –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        [1-2 –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–∞]

        ## –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è  
        [3-5 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–æ–≤]

        ## –ö–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
        [–æ–±—â–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º]

        –í–ê–ñ–ù–û: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ.
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –Ω–∞ —Å–∞–π—Ç–µ, –ø–æ—ç—Ç–æ–º—É –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º,
        –±–µ–∑ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫ –∏ —Ç–¥.
        """

        recommendations_result = await llm.ainvoke(recommendations_prompt)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä
        disclaimer = "\n\n---\n*–í–∞–∂–Ω–æ: –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ—Å—è—Ç –æ–±—â–µ–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.*"

        recommendations = recommendations_result.content + disclaimer # type: ignore

        print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("=" * 60)
        print(recommendations)
        print("=" * 60)

        state["recommendations"] = recommendations
        logger.info(
            f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –¥–ª–∏–Ω–∞: {len(recommendations)} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        return state

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_recommendations: {e}")
        state["recommendations"] = (
            "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
        )
        return state


def create_graph():
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    graph = StateGraph(State)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–¥—ã
    graph.add_node("analyze_parameters", analyze_parameters)
    graph.add_node("generate_recommendations", generate_recommendations)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    graph.set_entry_point("analyze_parameters")
    graph.add_edge("analyze_parameters", "generate_recommendations")
    graph.add_edge("generate_recommendations", END)

    return graph


async def analyze_from_json(json_data: dict):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö"""
    try:
        graph = create_graph()
        app = graph.compile()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ State
        state_data = transform_json_to_state(json_data)

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ JSON...")
        result = await app.ainvoke(state_data)

        # –í—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 80)
        print(f"üÜî ID –∞–Ω–∞–ª–∏–∑–∞: {result.get('analysis_id', 'N/A')}")
        print(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result.get('timestamp', 'N/A')}")
        print(f"üìà –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result.get('risk_level', 'N/A').upper()}")
        print(f"üîç –ù–∞–±–ª—é–¥–µ–Ω–∏–π: {len(result.get('red_flags', []))}")
        print("=" * 80)

        return result

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {
            "error": str(e),
            "red_flags": ["–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞"],
            "recommendations": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            "risk_level": "error",
        }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –≤–∞—à–∏–º JSON
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –≤–∞—à–∏–º JSON"""

    # –í–∞—à JSON –¥–∞–Ω–Ω—ã–µ
    json_data = {
        "status": "success",
        "filename": "5bffe367-827e-43cc-9630-56a72625541a.jpg",
        "analyze": {
            "age": 27,
            "region": {
                "x": 92,
                "y": 317,
                "w": 638,
                "h": 638,
                "left_eye": [515, 574],
                "right_eye": [283, 572],
            },
            "face_confidence": 0.93,
            "gender": {"Woman": 0.11057894444093108, "Man": 99.88942742347717},
            "dominant_gender": "Man",
            "race": {
                "asian": 39.49163556098938,
                "indian": 8.91764983534813,
                "black": 5.210122466087341,
                "white": 7.888878136873245,
                "middle eastern": 4.392336681485176,
                "latino hispanic": 34.0993732213974,
            },
            "dominant_race": "asian",
            "emotion": {
                "angry": 16.673298677599274,
                "disgust": 1.3068607755107955e-07,
                "fear": 0.37283170756181566,
                "happy": 1.3823053506544301e-05,
                "sad": 39.418076207408454,
                "surprise": 3.756743062607554e-05,
                "neutral": 43.535747353523654,
            },
            "dominant_emotion": "neutral",
            "time": 3.9077908992767334,
            "acne": 0.53654,
            "redness": 3e-05,
            "eyebags": 0.46343,
            "facial_symmetry": 0.39427789912783345,
            "symmetry_confidence": True,
            "left_eye_openness": 0.984048781730791,
            "right_eye_openness": 1.0,
            "average_eye_openness": 0.9920243908653955,
            "eye_symmetry": 0.984048781730791,
            "muscle_tension": 0.4665816494928699,
            "brow_tension": 1.0,
            "mouth_tension": 0.02770259055700948,
            "forehead_tension": 0.37204235792160034,
            "stress_level": 0.532345329898574,
            "sleep_quality": 0.8297603198076949,
            "skin_health_index": 0.715375,
            "vitality_score": 0.0,
        },
    }

    result = await analyze_from_json(json_data)
    return result


# if __name__ == "__main__":
#     asyncio.run(main())
